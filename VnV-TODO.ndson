{"task":"Time-profile smear for 0.25 m over 5 s","priority":"High","depends_on":"C:\\Users\\%USERNAME%\\Code\\asciimath\\warp-field-coils\\VnV-TODO.ndjson","source_file":"C:\\Users\\echo_\\Code\\asciimath\\polymerized-lqg-matter-transporter\\src\\utils\\multi_field_superposition.py","source_file_lines":"15:25","source_snippet":"def time_smear_profile(t: float, total_time: float = 5.0) -> float:\n    \"\"\"Smooth step from 0 → 1 over total_time seconds.\"\"\"","python_snippet":"import numpy as np\nfrom multi_field_superposition import time_smear_profile\n# verify start, mid, end\nassert time_smear_profile(0,5)==0\nassert np.isclose(time_smear_profile(2.5,5),0.5,atol=1e-3)\nassert time_smear_profile(5,5)==1.0\n# verify smoothness (no discontinuities)\ndts = np.diff([time_smear_profile(t,5) for t in np.linspace(0,5,51)])\nassert np.all(dts<=0.1), \"Acceleration/decel step too sharp\""}
{"task":"Sensor-field conversion calibration","priority":"Medium","depends_on":"C:\\Users\\%USERNAME%\\Code\\asciimath\\warp-field-coils\\VnV-TODO.ndjson","source_file":"C:\\Users\\echo_\\Code\\asciimath\\warp-field-coils\\src\\subspace_transceiver\\transceiver.py","source_file_lines":"10:20","source_snippet":"def simulate_sensor_readout(self, currents: np.ndarray) -> np.ndarray:\n    \"\"\"Map coil currents to sensor strain readings.\"\"\"","python_snippet":"import numpy as np\nfrom transceiver import Transceiver\n# drive each of 8 coils at 0.1 A\nt = Transceiver()\nreadings = t.simulate_sensor_readout(np.full(8,0.1))\n# expected linear response k·I\nek = 1e-6  # from design specs\nassert np.allclose(readings, ek*0.1,rtol=0.1), \"Sensor conversion off by >10%\""}
{"task":"Discretization stability over 5 s","priority":"High","depends_on":"C:\\Users\\%USERNAME%\\Code\\asciimath\\warp-field-coils\\VnV-TODO.ndjson","source_file":"C:\\Users\\echo_\\Code\\asciimath\\warp-solver-equations\\scripts\\solver.py","source_file_lines":"50:70","source_snippet":"def step_field(self, dt: float) -> None:\n    \"\"\"Advance the warp field simulation by dt seconds.\"\"\"","python_snippet":"import numpy as np\nfrom solver import Solver\ns = Solver(grid_shape=(10,10,10), dt=0.1)\ninitial = s.field.copy()\nfor _ in range(50):  # 5 s total\n    s.step_field(0.1)\nfinal = s.field\n# no unphysical drift: max change <1%\nassert np.max(np.abs(final-initial))<0.01*np.max(np.abs(initial)), \"Field drift >1% over 5s\""}